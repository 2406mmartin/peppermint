generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           Int        @id @default(autoincrement())
  createdAt                    DateTime   @default(now())
  updatedAt                    DateTime   @default(now())
  name                         String
  password                     String
  email                        String     @unique
  isAdmin                      Boolean
  language                     String?    @default("en")
  notify_ticket_created        Boolean    @default(true)
  notify_ticket_status_changed Boolean    @default(true)
  notify_ticket_comments       Boolean    @default(true)
  notify_ticket_assigned       Boolean    @default(true)
  todos                        Todos[]
  tickets                      Ticket[]
  file                         UserFile[]
  notes                        Notes[]
  Team                         Team?      @relation(fields: [teamId], references: [id])
  teamId                       Int?
}

model Team {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  levels    Json?
  members   User[]
}

model Ticket {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  name       String
  title      String
  detail     String?
  email      String
  note       String?
  isComplete Boolean
  priority   String
  assignedTo User?        @relation(fields: [userId], references: [id])
  client     Client       @relation(fields: [clientId], references: [id])
  clientId   Int
  userId     Int?
  TicketFile TicketFile[]
  linked     Json?
}

model Client {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  name        String
  email       String   @unique
  contactName String
  number      String?
  notes       String?
  tickets     Ticket[]
  active      Boolean  @default(true)
}

model UserFile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  filename  String
  path      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model TicketFile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  filename  String
  path      String
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
}

model Notes {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  title      String
  note       String
  Favourited Boolean  @default(false)

  createdBy User @relation(fields: [userId], references: [id])
  userId    Int
}

model Todos {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  text      String
  done      Boolean  @default(false)
  createdBy User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Webhooks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  url       String
  type      Hook
  active    Boolean
  secret    String?
  createdBy String
}

model Discord {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  secret    String?
  url       String
  active    Boolean  @default(false)
}

model Slack {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  secret    String?
  url       String
  active    Boolean  @default(false)
}

model Email {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  active    Boolean  @default(false)
  user      String
  pass      String
  secure    Boolean  @default(false)
  host      String
  reply     String
  port      String
}

model Config {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  notifications Json // Array of service names and an active field of TRUE OR FALSE
}

enum Hook {
  ticket_created
  ticket_status_changed
}
